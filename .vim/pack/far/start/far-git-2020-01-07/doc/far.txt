*far.vim*   Find And Replace

Author:         Oleg Khalidov <brooth@gmail.com>
Description:    Find And Replace
Homepage:       https://github.com/brooth/far.vim/
Version:        beta3

==============================================================================

>
           _|_|                                  _|
         _|        _|_|_|  _|  _|_|  _|      _|      _|_|_|  _|_|
       _|_|_|_|  _|    _|  _|_|      _|      _|  _|  _|    _|    _|
         _|      _|    _|  _|          _|  _|    _|  _|    _|    _|
         _|        _|_|_|  _|  _|        _|      _|  _|    _|    _|
<

==============================================================================
CONTENTS                                                        *far-contents*

   1. Intro ...................................................... |far-intro|
   2. Usage ...................................................... |far-usage|
   2.1  Hello, World! .................................... |far-quick-example|
   2.2  Far ........................................................... |:Far|
   2.3  Farp ......................................................... |:Farp|
   2.4  Fardo ....................................................... |:Fardo|
   2.5  Refar ....................................................... |:Refar|
   2.7  F ............................................................... |:F|
   3. Extras .................................................... |far-extras|
   3.1  Multiline Replacement ................................ |far-multiline|
   3.2  Highlighting ......................................... |far-highlight|
   3.2  Command-Line Completion ............................... |far-complete|
   3.3  Preview Window ......................................... |far-preview|
   3.4  Jump to source ............................................ |far-jump|
   3.5  Consistency Check .................................. |far-consistency|
   3.6  Ranges ................................................... |far-range|
   4. Configuration ............................................. |far-config|
   5. Mappings ................................................ |far-mappings|
   6. Command Params ............................................ |far-params|
   7. Bugs ........................................................ |far-bugs|
   8. Changelog .............................................. |far-changelog|
   9. License .................................................. |far-license|

==============================================================================
INTRO                                                              *far-intro*

    Far.vim makes it easier to find and replace text through multiple files.
    It's inspired by fancy IDEs, like IntelliJ and Eclipse, that provide
    cozy tools for such tasks.

==============================================================================
USAGE                                                              *far-usage*

"Hello, World!"                                            *far-quick-example*

    No time to read? Here is the quick example:
>
    :Far foo bar **/*.py<CR>
    :Fardo<CR>
<
*:Far* {pattern} {replace-with} {file-mask} [params]
    Find the text to replace. Similar to |:substitute| command.
    The arguments are separated by space (" "). To escape space character
    use "\s" or "\ ". To escape double quote use "\"".  To escape backslash
    use "\\\\".
    For the {pattern} see |pattern|. You can also use '*' as {pattern} for
    multiline replacement. See |far-multiline|.
    {replace-with} can be a literal string, or |sub-replace-special|.
    {file-mask} is a simple file mask pattern, see |:vimgrep| for examples.
    Note: Use '%' as {file-mask} to search in current buffer.
    Note: Use rg defined types as {file-mask} to search when using rg or rgnvim
    sources. eg. 'html' 'py' 'js'
    For [params] see |far-params|
    See |mappings| to acquaint yourself with the shortcuts availble for far buffer.

*:Farp* [params]
    |Farp| command allows to enter {pattern}, {replace-with} and {file-mask}
    one after the other:
>
     :Farp [<params>]
     >Search (pattern): {pattern}
     >Replace with: [replace-with]
     >File mask: {file-mask}
<
    Note: You don't have to escape space character.
    Note: |Farp| allows empty [replace-with] if you need to remove matched text.
    For {pattern}, {replace-with}, {file-mask} and [params] see |Far| command.

*:Fardo* [params]
    |Fardo| starts the replacement task. This command must be executed in a FAR
    buffer (buffer with |Far| or |Farp| result).
    For [params] see |fardo-params|.

*:Refar* [params]
    |Refar| reruns |Far| or |Farp| with the same arguments or you can change
    any via [params].
    For [params] see |refar-params|.
    Note: It must be executed in a FAR buffer.
    You can use |Refar| in case the data's been changed so you need to update
    the search result.


*:F* {pattern} {file-mask} [params]
    Find {pattern} in {file-mask} files. Similar to |Far| without
    {replace-with}.
    For {pattern}, {file-mask} and [params] see |Far|.

==============================================================================
EXTRAS                                                            *far-extras*

Multiline Replacement                                          *far-multiline*

    It's allowed to use multiline text as {pattern} or/and {replace-with}
    expressions for |Far|, |Farp| and |F| commands.

    a) The first approach is to use visual selection. Go to Visual mode,
    highlight the text you want to replace and hit ':'. Use '*' as {pattern}:
>
    :'<,'>Far * {replace-with} {file-mask} [params]
<
    and resp. for |Farp|:
>
     :'<,'>Farp [<params>]
     >Search (pattern): *
     >Replace with: [replace-with]
     >File mask: {file-mask}
<
    b) The second approach - simply paste yanked text.
>
    :Far <^ra> <^rb> {file-mask} [params]
<
     and resp. for |Farp|:
>
     :Farp [<params>]
     >Search (pattern): <^ra>
     >Replace with: <^rb>
     >File mask: {file-mask}
<
    Note: you need to explicitly escape all special characters. See |pattern|.


Highlighting                                                   *far-highlight*

    If |g:far#highlight_match| flag is set, far.vim adds per line highlighting
    for each matched and resulting item. Since per-line highlighting is a CPU
    depending feature in vim, it's better sometimes to turn it off for a big
    amount of data (Avg. 200+ items).

    If the highlighting feature is off, the following abbreviations are added
    to the beginning of resp. lines:
        X - Item excluded
        R - Item replaced
        B - Item broken (see |far-consistency|)

    See |far-highlight-config|.


Command-Line Completion                                         *far-complete*

    Far.vim supports built-in command-line completion (see |'wildmenu'|).
    Hit <tab> while entering |Far|, |Farp| or |Fardo| command to auto-complete
    predefined or previously used arguments.
    Far.vim also supports auto-completion of |far-params| values. Hit <tab>
    after '=' character:
>
    :Far foo bar % --win-l<tab>         ->  :Far foo bar % --win-layout
    :Far foo bar % --win-layout=c<tab>  ->  :Far foo bar % --win-layout=current
<
    See also |g:far#file_mask_favorites|.


Preview Window                                                   *far-preview*

    Far.vim allows previewing the code snippet where the item was found. If
    |g:far#auto_preview| flag is set, far.vim automatically opens and scrolls
    the preview window on cursor movement. If |g:far#auto_preview| is set to 0,
    you can control preview window manually (see |far-mappings|). You can also
    scroll preview window up and down from a FAR buffer (no need to switch
    focus to the preview window).

    By default <c-k> scrolls up and <c-j> scrolls down.

    See |far-mappings|, |g:far#preview_window_scroll_step|,
        |g:far#auto_preview|, |g:far#preview_window_layout|,
        |g:far#preview_window_width|, |g:far#preview_window_height|.


Jump to source                                                      *far-jump*
    
    If there is an open buffer for a matched item, you can jump to it from a
    FAR window by hitting <CR> (by default) button. If there is no such buffer,
    far.vim opens it in current (FAR) window.

    See |far-mappings|


Consistency Check                                            *far-consistency*
    
    Since the search (|Far| or |Farp| command) to the replacement (|Fardo|),
    the file's content can be modified. During the replacement far.vim is
    checking that respective item's been replaced successfully. If not, this
    item is marked as 'broken'. You can see these items in |FarBrokenItem|
    highlighting or with *B* prefix if |g:far#highlight_match| is set to 0.

    See |far-highlight|, |g:far#highlight_match|.

Ranges                                                             *far-range*

    You can specify the line-range to search in. Available for |Far|, |Farp|,
    |F| and |Refar| commands.

    Example: find candidates in 10-20 lines only:
>
    :10,20Far foo bar **/*.py
<

    Example: find candidates under 500 line:
>
    :0,499Far foo bar **/*.py
<
    See also: |far-multiline|

==============================================================================
CONFIGURATION                                                     *far-config*

    You can change next variables in order to configure far.vim behavior.

*g:far#source*
    Specify the source. Far source controls candidates gathering.
    Far.vim provides next sources out of the box:

        'vimgrep'
            Synchronous source. Uses |:vimgrep| to find candidates.
            Doesn't need external dependencies.
            Supports multiline search.

        'ag'
            Synchronous source. Uses "Ag" (The Silver Searcher) to find
            candidates. Requires 'ag' installation.
            Note: Doesn't support multiline search.
            Note: Uses regexp as file-mask.

        'agnvim'
            Asynchronous source. Same as 'ag' but uses Neovim asynchronous API
            to search candidates in a separate thread.
            Requires 'nvim' and 'ag' installation.

        'rg'
            Synchronous source. Uses "rg" (Ripgrep) to find candidates.
            Requires 'rg' installation.
            Note: Doesn't support multiline search.
            Note: Uses rg --glob as file-mask

        'rgnvim'
            Asynchronous source. Same as 'rg' but uses Neovim asynchronous API
            to search candidates in a separate thread.
            Requires 'nvim' and 'rg' installation.

        'ack'
            Synchronous source. Uses "Ack" ("http://beyondgrep.com/") to find
            candidates. Requires 'ack' installation.
            Note: Doesn't support multiline search.
            Note: Uses regexp as file-mask.

        'acknvim'
            Asynchronous source. Same as 'ack' but uses Neovim asynchronous API
            to search candidates in a separate thread.
            Requires 'nvim' and 'ack' installation.

*g:far#limit*
    Limit the maximum amount of candidates.

    Default: 1000

*g:far#cwd*
    Specify the current working directory. In this directory where Far.vim
    searches candidates.

    Default: |getpwd()| value.

*g:far#default_mappings*
    Apply default mappings to each FAR buffer. See |far-mappings|.

    Options: 0, 1
    Default: 1

*g:far#auto_preview*
    Automatically open/scroll preview window on cursor movement.
    See |far-preview|, |--auto-preview|

    Options: 0, 1
    Default: 1

*g:far#result_preview*
    Show result preview to the right of matched text.
    See |--result-preview|

    Options: 0, 1
    Default: 1

*g:far#highlight_match*
    Enable highlight feature.
    See |far-highlight|, |--hl-match|.

    Options: 0, 1
    Default: 1

*g:far#window_layout*
    FAR window layout.
    See |--win-layout|.

    Options: 'top', 'left', 'right', 'bottom', 'tab', 'current'
    Default: 'right'

*g:far#window_width*
    FAR window width.
    See |--win-width|.

    Default: 100

*g:far#window_height*
    FAR window height.
    See |--win-height|.

    Default: 20

*g:far#preview_window_layout*
    Preview window layout (relative to FAR window).
    See |far-preview|, |--preview-win-layout|.

    Options: 'top', 'left', 'right', 'bottom'
    Default: 'bottom'

*g:far#preview_window_width*
    Preview window width.
    See |far-preview|, |--preview-win-width|.

    Default: 100

*g:far#preview_window_height*
    Preview window height.
    See |far-preview|, |--preview-win-height|.

    Default: 11

*g:far#file_mask_favorites*
    List of favorite file masks provided for command-line completion.
    See |far-complete|

    Default: ['%', '**/*.*', '**/*.html', '**/*.js', '**/*.css']

*g:far#default_file_mask*
    This value is used as the file-mask if it wasn't specified through the command.

*g:far#collapse_result*
    Auto collapse result tree.
    See |--collapse|

    Options: 0, 1
    Default: 0

*g:far#preview_window_scroll_step*
    Step size for preview window scrolling.
    See |far-preview|, |far-mappings|.

    Default: 1

*g:far#auto_write_replaced_buffers*
    Automatically write replaced buffer (if it hasn't been unsaved)
    See |--auto-write-bufs|

    Options: 0, 1
    Default: 0

*g:far#auto_delete_replaced_buffers*
    Automatically delete replaced buffer (if it hasn't been loaded)
    See |--auto-delete-bufs|

    Options: 0, 1
    Default: 0

*g:far#window_min_content_width*
    Minimal width of a FAR buffer content.

    Default: 60

*g:far#check_window_resize_period*
    The period of time in milliseconds in which timer checks FAR buffer width
    and updates its content if the width has been changed.

    Default: 2000

*g:far#repl_devider*
    This variable controls the icon between matched and resulting text.

    Default: '  ➝  '

*g:far#multiline_sign*
    This variable controls multiline node icon.
    See |far-multiline|

    Default: '⬎'

*g:far#cut_text_sign*
    This variable controls the icon of cut text.

    Default: '…'

*g:far#collapse_sign*
    This variable controls expanded node icon.

    Default: '-'

*g:far#expand_sign*
    This variable controls collapsed node icon.

    Default: '+'

------------------------------------------------------------------------------
Highlighting Groups:                                    *far-highlight-config*

    In order to configure FAR buffer appearance you can modify next
    highlight groups.

*FarFileStats*
    Controls buffer statistic appearance.

    Default:
>
    hi def link FarFileStats Comment
<
*FarFilePath*
    Controls buffer name (path) appearance.

    Default:
>
    hi def link FarFilePath Directory
<
*FarSearchVal*
    Controls matched item appearance.

    Default:
>
    hi def link FarSearchVal Keyword
<
*FarReplaceVal*
    Controls resulting item appearance.

    Default:
>
    hi def link FarReplaceVal String
<
*FarExcludedItem*
    Controls excluded item appearance.

    Default:
>
    hi def link FarExcludedItem NonText
<
*FarReplacedItem*
    Controls replaced item appearance.
>
    hi def link FarReplacedItem String
>
*FarBrokenItem*
    Controls broken items appearance.
    See |far-consistency|

    Default:
>
    hi def link FarBrokenItem Error
<
*FarLineCol*
    Controls line number text appearance.

    Default:
>
    hi def link FarLineCol LineNr
<
*FarPreviewMatch*
    Controls |:match| highlighting in preview windows.

    Default:
>
    hi def link FarPreviewMatch Search
<
==============================================================================
MAPPINGS                                                        *far-mappings*

    Next bindings are applied to each FAR buffer if |g:far#default_mappings|
    is set.
    Note: If you want to define custom mapping, you need to set to 0
    |g:far#default_mappings| variable and explicitly configure all the bindings.

x
v_x
    Exclude item under the cursor.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(1)<cr>
    vnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(1)<cr>
<
i
v_i
    Include item under the cursor.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(0)<cr>
    vnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(0)<cr>
<
t
v_t
    Toggle item exclusion under the cursor.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(-1)<cr>
    vnoremap <buffer><silent> <KEY> :call g:far#change_exclude_under_cursor(-1)<cr>
<
X
    Exclude all items.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_all(1)<cr>
<
I
    Include all items.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_all(0)<cr>
<
T
    Toggle exclusion for all items.

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_exclude_all(-1)<cr>
<
<CR>
    Jump to the source code of the item under the cursor.
    See |far-jump|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#jump_buffer_under_cursor()<cr>
<
p
    Open preview window (if not) and scroll to the item under the cursor.
    See |far-preview|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#show_preview_window_under_cursor()<cr>
<
P
    Close preview window.
    See |far-preview|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY> :call g:far#close_preview_window()<cr>
<
CTRL-K
    Scroll preview window up (if open).
    See |far-preview|, |g:far#preview_window_scroll_step|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY>
        \   :call g:far#scroll_preview_window(-g:far#preview_window_scroll_step)<cr>
<
CTRL-J
    Scroll preview window down (if open).
    See |far-preview|, |g:far#preview_window_scroll_step|

    For custom mapping:
>
    nnoremap <buffer><silent> <KEY>
        \   :call g:far#scroll_preview_window(g:far#preview_window_scroll_step)<cr>
<
zo
    Expand node under the cursor.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_under_cursor(0)<cr>
<
zc
    Collapse node under the cursor.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_under_cursor(1)<cr>
<
za
    Toggle node expanding under the cursor.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_under_cursor(-1)<cr>
<
zr
    Expand all nodes.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_all(0)<cr>
<
zm
    Collapse all nodes.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_all(1)<cr>
<
zA
    Toggle exclusion for all nodes.
>
    nnoremap <buffer><silent> <KEY> :call g:far#change_collapse_all(-1)<cr>
<

==============================================================================
COMMAND PARAMS

    Command params is used to temporarily (for current execution only)
    define several |far-config| variables.

--source                                                        *far-params*
    |Far|, |Farp| and |F| param. Changes |g:far#source| value for current
    execution.

--limit
    |Far|, |Farp| and |F| param. Changes |g:far#limit| value for current
    execution.

--cwd
    |Far|, |Farp| and |F| param. Changes |g:far#cwd| value for current
    execution.

--win-layout
    |Far|, |Farp| and |F| param. Changes |g:far#window_layout| value for
    current execution.

--win-width
    |Far|, |Farp| and |F| param. Changes |g:far#window_width| value for current
    execution.

--win-height
    |Far|, |Farp| and |F| param. Changes |g:far#window_height| value for current
    execution.

--preview-win-layout
    |Far|, |Farp| and |F| param. Changes |g:far#preview_window_layout| value for
    current execution.

--preview-win-width
    |Far|, |Farp| and |F| param. Changes |g:far#preview_window_width| value for
    current execution.

--preview-win-height
    |Far|, |Farp| and |F| param. Changes |g:far#preview_window_height| value for
    current execution.

--auto-preview
    |Far|, |Farp| and |F| param. Changes |g:far#auto_preview| value for
    current execution.

--hl-match
    |Far|, |Farp| and |F| param. Changes |g:far#highlight_match| value for
    current execution.

--collapse
    |Far|, |Farp| and |F| param. Changes |g:far#collapse_result| value for
    current execution.

--result-preview
    |Far| and |Farp| param. Changes |g:far#result_preview| value for
    current execution.

--auto-write-bufs                                               *fardo-params*
    |Fardo| param. Changes |g:far#auto_write_replaced_buffers| value for
    current execution.

--auto-delete-bufs
    |Fardo| param. Changes |g:far#auto_delete_replaced_buffers| value for
    current execution.

--pattern                                                       *refar-params*
    |Refar| param. Changes {pattern} value for current execution.

--replace-with
    |Refar| param. Changes {replace-with} value for current execution.

--file-mask
    |Refar| param. Changes {file-mask} value for current execution.

--source
    |Refar| param. Changes |g:far#source| value for current execution.

--limit
    |Refar| param. Changes |g:far#limit| value for current execution.

--cwd
    |Refar| param. Changes |g:far#cwd| value for current execution.


==============================================================================
BUGS                                                                *far-bugs*

    Know issues:
     - highlight issue:
     Far number num **/*.py --win-layout=top --preview-layout=right

    If you find a bug, please, follow this easy-peasy steps:

     0)  Make sure you're using latest far.vim version.

     1)  Search for existing issues on https://github.com/brooth/far.vim/issues.
         If there is one and it's open, please, submit a reply.

     2)  Turn on debug mode. In '.vimrc' ('init.vim') set this flag:
>
         let g:far#debug = 1
<
         restart vim and reproduce the bug.

     3)  Create new issue (or submit a reply to existing) on
         https://github.com/brooth/far.vim/issues. Add brief description
         and attach '~/far.vim.log' log file.

     4) Turn off debug mode.

    Thank you in advance!

==============================================================================
CHANGELOG                                                      *far-changelog*

    beta3
     - fix: single quote in Far/F expression
     - syntax renamed from far_vim to far #50:wq
     - ripgrep file mask changed to --glob
     - default file-mask
     - Farundo depricated

    beta2
     - status line
     - Farundo
     - cut filename to far buffer if long
     - closing preview window disables auto preview
     - fix: jump to buffer fails on file names with spaces
     - Refar params [--pattern=,--replace-with, --file-mask]
     - alternative sources. source as command param
     - Ag (the silver searcher) support
     - remap review scrolling to <c-j><c-k>
     - cwd param (current working directory)
     - limit (g:far#limit var and --limit command)
     - Neovim async support
     - fix: far#log -> far#log masked as broken
     - fix: set filetype=off if already open
     - fix: visual selecion inside one line work as full line, syn is broken as
            well
     - remove jump setting, always open in far window
     - fix: fails on 500 found items.
     - cmdargs: pass to source not processed as cmd params
     - complete Refar with current values
     - complete cwd
     - fix_cnum: search column number manually. modes: 'all' - grep?,
                 'next' - ag,ack
     - Ack support
     - fix: command completion doesn't respect cursor position
     - F command - only find (--result-preview=0 by default)
     - remove greppg source
     - override source args, 'suggest' flag (suggest for completion)
     - return tmp file instead of items for big results
     - <range> support

    beta1       first public version.

==============================================================================
LICENSE                                                          *far-license*

    MIT License. https://opensource.org/licenses/MIT
