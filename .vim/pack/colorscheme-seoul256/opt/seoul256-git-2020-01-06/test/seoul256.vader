Execute (Initialize):
  Save g:seoul256_background g:seoul256_light_background

  function! Init(bg)
    unlet! g:seoul256_background g:seoul256_light_background
    colo default
    execute 'set background='.a:bg
  endfunction

  function! HI(group)
    redir => out
    execute "silent hi ".a:group
    redir END
    return out
  endfunction

  function! AssertDark(...)
    let bg = a:0 > 0 ? a:1 : 237
    AssertEqual 252, g:seoul256_current_fg
    AssertEqual bg,  g:seoul256_current_bg
    Assert HI('Normal')     =~ 'ctermfg=252 ctermbg='.bg, 'Normal'
    Assert HI('CursorLine') =~ 'ctermbg='.(bg - 1),       'CursorLine'
    Assert HI('TabLine')    =~ 'ctermfg='.(bg + 12),      'TabLine'

    Assert HI('DiffAdd')    !~ 'fg', 'DiffAdd fg=NONE'
    Assert HI('DiffText')   !~ 'fg', 'DiffText fg=NONE'

    AssertEqual 'seoul256', g:colors_name
    AssertEqual a:0 > 1 ? a:2 : 'dark', &background
  endfunction

  function! AssertLight(...)
    let bg = a:0 > 0 ? a:1 : 253
    let b  = bg == 256 ? 231 : bg
    AssertEqual 239, g:seoul256_current_fg
    AssertEqual bg,  g:seoul256_current_bg
    Assert HI('Normal')     =~ 'ctermfg=239 ctermbg='.b,  'Normal'
    Assert HI('CursorLine') =~ 'ctermbg='.(bg - 1),       'CursorLine'
    Assert HI('TabLine')    =~ 'ctermfg='.(bg - 12),      'TabLine'

    Assert HI('DiffAdd')    !~ 'fg', 'DiffAdd fg=NONE'
    Assert HI('DiffText')   !~ 'fg', 'DiffText fg=NONE'

    Assert g:colors_name =~ '^seoul256\(-light\)\?$', g:colors_name
    AssertEqual a:0 > 1 ? a:2 : 'light', &background
  endfunction

Before (light default):
  call Init('light')

Execute (light default > colo seoul256 = dark seoul256):
  colo seoul256
  call AssertDark()

Execute (light default > colo seoul256-light = seoul256-light):
  colo seoul256-light
  call AssertLight()
  AssertEqual 'seoul256-light', g:colors_name

Before (dark default):
  call Init('dark')

Execute (dark default > colo seoul256 = dark seoul256):
  colo seoul256
  call AssertDark()

Execute (dark default > colo seoul256-light = seoul256-light):
  colo seoul256-light
  call AssertLight()
  AssertEqual 'seoul256-light', g:colors_name

Before (dark seoul256):
  call Init('dark')
  colo seoul256

Execute (dark seoul256 > colo seoul256 = dark seoul256):
  colo seoul256
  call AssertDark()

Execute (dark seoul256 > colo seoul256-light = seoul256-light):
  colo seoul256-light
  call AssertLight()
  AssertEqual 'seoul256-light', g:colors_name

Execute (dark seoul256 > set background=dark = dark seoul256):
  set background=dark
  call AssertDark()

Execute (dark seoul256 > set background=light = light seoul256):
  set background=light
  call AssertLight()
  AssertEqual 'seoul256', g:colors_name

Before (light seoul256):
  call Init('dark')
  colo seoul256
  set background=light

Execute (light seoul256 > colo seoul256 = light seoul256):
  colo seoul256
  call AssertLight()
  AssertEqual 'seoul256', g:colors_name

Execute (light seoul256 > colo seoul256-light = seoul256-light):
  colo seoul256-light
  call AssertLight()
  AssertEqual 'seoul256-light', g:colors_name

Execute (light seoul256 > set background=dark = dark seoul256):
  set background=dark
  call AssertDark()

Execute (light seoul256 > set background=light = light seoul256):
  set background=light
  call AssertLight()
  AssertEqual 'seoul256', g:colors_name

Before (light seoul256):
  call Init('dark')
  colo seoul256-light

Execute (seoul256-light > colo seoul256 = dark):
  colo seoul256
  call AssertDark()

Execute (seoul256-light > colo seoul256-light = seoul256-light):
  colo seoul256-light
  call AssertLight()
  AssertEqual 'seoul256-light', g:colors_name

Execute (seoul256-light > set background=dark = dark seoul256):
  set background=dark
  call AssertDark()

Execute (seoul256-light > set background=light = seoul256-light):
  set background=light
  call AssertLight()
  AssertEqual 'seoul256-light', g:colors_name

Before:
  call Init('light')

Execute (default > g:seoul256_background (dark) > colo seoul256 = dark seoul256):
  let g:seoul256_background = 233
  colo seoul256
  call AssertDark(233)

Execute (default > g:seoul256_background (light) > colo seoul256 = light seoul256):
  let g:seoul256_background = 255
  colo seoul256
  call AssertLight(255)
  AssertEqual 'seoul256', g:colors_name

Execute (default > g:seoul256_background (invalid) > colo seoul256 = dark seoul256):
  let g:seoul256_background = 100
  colo seoul256
  call AssertDark()
  AssertEqual 'seoul256', g:colors_name

Execute (default > g:seoul256_background (dark) > colo seoul256-light = seoul256-light (default)):
  let g:seoul256_background = 233
  colo seoul256-light
  call AssertLight()
  AssertEqual 233, g:seoul256_background

Execute (default > g:seoul256_background (light) > colo seoul256-light = seoul256-light):
  let g:seoul256_background = 256
  colo seoul256-light
  call AssertLight(256)
  AssertEqual 'seoul256-light', g:colors_name

Execute (default > g:seoul256_background (invalid) > colo seoul256-light = seoul256-light):
  let g:seoul256_background = 100
  colo seoul256-light
  call AssertLight()
  AssertEqual 'seoul256-light', g:colors_name

Execute (dark g:seoul256_background):
  for bg in range(233, 239)
    let g:seoul256_background = bg
    colo seoul256
    call AssertDark(bg)
  endfor
  for bg in range(233, 239)
    let g:seoul256_background = bg
    set background=dark
    call AssertDark(bg)
  endfor

Execute (light g:seoul256_background):
  for bg in range(252, 256)
    let g:seoul256_background = bg
    colo seoul256
    call AssertLight(bg)
  endfor
  for bg in range(252, 256)
    let g:seoul256_background = bg
    set background=light
    call AssertLight(bg)
  endfor

# XXX For the following two cases, &background value will not match the version
Execute (dark g:seoul256_background -> colo seoul256 -> set background=light = dark seoul256):
  let g:seoul256_background = 235
  colo seoul256
  call AssertDark(235)
  set background=light

  call AssertDark(235, 'light')

Execute (light g:seoul256_background -> colo seoul256 -> set background=dark = light seoul256):
  let g:seoul256_background = 255
  colo seoul256
  call AssertLight(255)
  set background=dark
  call AssertLight(255, 'dark')

Execute (dark g:seoul256_background + g:seoul256_light_background -> colo seoul256-light = light seoul256):
  let g:seoul256_background = 236
  colo seoul256
  call AssertDark(236)
  colo seoul256-light
  call AssertLight(253)

  let g:seoul256_light_background = 255
  colo seoul256
  call AssertDark(236)
  colo seoul256-light
  call AssertLight(255)

  " g:seoul256_background should still be 236
  colo seoul256
  call AssertDark(236)

  " Invalid g:seoul256_light_background
  let g:seoul256_light_background = 0
  colo seoul256-light
  call AssertLight(253)

  " g:seoul256_background should still be 236
  colo seoul256
  call AssertDark(236)

Execute (Cleanup):
  AssertEqual 'default', g:colors_name

  delf Init
  delf HI
  delf AssertDark
  delf AssertLight

  Restore
  silent! source $MYVIMRC
