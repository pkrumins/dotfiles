*textmanip.txt* Maniplate selected text easily


	    .	       .
	   -|- ,-. . , |- ,-,-. ,-. ,-. . ,-.  >
	    |  |-'  X  |  | | | ,-| | | | | |
	    `' `-' ' ` `' ' ' ' `-^ ' ' ' |-'
					  |   < easy manupilation >

Version: 2.5
Author : t9md <taqumd@gmail.com>

==============================================================================
CONTENTS						  *textmanip-contents*

Introduction					      |textmanip-introduction|
Variables						  |textmanip-variable|
Mapping							   |textmanip-mapping|
Configuration Examples					  |textmanip-examples|
Use Case						   |textmanip-usecase|
Practice						  |textmanip-practice|
Detail							    |textmanip-detail|
Todo							      |textmanip-todo|
Bug							       |textmanip-bug|
Changelog						 |textmanip-changelog|

==============================================================================
INTRODUCTION						*textmanip-introduction*

*textmanip* is minimal utility for

  * move visually selected text easily ( linewise / blockwise )
  * duplicate text easily ( linewise / blockwise )
  * count support / keep original cursor pos while moving / duplicating.
  * undo with one 'u' by undojoining.

Requirement:
- Vim 7.3 or later

Latest Version:
http://github.com/t9md/vim-textmanip

							      *textmanip-mode*
Textmanip Mode~
Textmanip have two mode.

- insert
  don't overwrite existing text when overrap.

- replace
  overwrite text and restore original text when selected area pass overwitten
  area.

==============================================================================
VARIABLES						*textmanip-variables*

*g:textmanip_enable_mappings*
	Default: 0

	If this value is 1, textmanip setup default keymap
	See |textmanip-mapping|.

*g:textmanip_startup_mode*
	Default: 'insert'

	Set 'insert' or 'replace', to specify textmanip act mode.
	Specify textmanip mode at startup.

*g:textmanip_current_mode*
	Default: value of |g:textmanip_startup_mode|.[

	This var store current mode.
	To change current mode, use |:TextmanipToggleMode| or 
	<Plug>(textmanip-toggle-mode).

*g:textmanip_move_ignore_shiftwidth*
	Default: 0

	If you set this to 1. When line move right/left is executed with
	|g:textmanip_move_shiftwidth| value.

*g:textmanip_move_shiftwidth*
	Default: 1

	When you set non zero value to |g:textmanip_move_ignore_shiftwidth|,
	this value is used how much right/left shifted when move right/left.

*g:textmanip_hooks*
	[Experimental]
	Default: {}

	{key}:	 Name of hook point. currently only 'finish' is available.
	{value}: |Funcref|

	example~
>
	let g:textmanip_hooks = {}
	function! g:textmanip_hooks.finish(tm)
	  let tm = a:tm
	  let helper = textmanip#helper#get()
	  if tm.linewise
	    if &ft ==# 'html'
	      call helper.indent(tm)
	    endif
	  else
	    " When blockwise move/duplicate, remove trailing white space.
	    " To use this feature without feeling counterintuitive,
	    " I recommend you to ':set virtualedit=block',
	    call helper.remove_trailing_WS(tm)
	  endif
	endfunction
<
==============================================================================
MAPPINGS						    *textmanip-mappings*

all mappings accept |count| which specify number of 'duplication' or
amount of 'movement'.

------------------------------------------------------------------------------
BASE Actions~

* insert-blank-line~
n_<Plug>(textmanip-blank-above)
n_<Plug>(textmanip-blank-below)
	insert blank line to specified direction.

v_<Plug>(textmanip-blank-above)
v_<Plug>(textmanip-blank-below)
	insert blank line to specified direction.

* duplicate~
n_<Plug>(textmanip-duplicate-up)
n_<Plug>(textmanip-duplicate-down)
	duplicate selection to specified direction.

v_<Plug>(textmanip-duplicate-up)
v_<Plug>(textmanip-duplicate-down)
v_<Plug>(textmanip-duplicate-left)
v_<Plug>(textmanip-duplicate-right)
	duplicate selection to specified direction.

* move~
v_<Plug>(textmanip-move-up)
v_<Plug>(textmanip-move-down)
v_<Plug>(textmanip-move-left)
v_<Plug>(textmanip-move-right)

    Move selected area to specified direction.

    |linewise| (|v_V| or |v_v| expand multi line)
    move line up/down/left/right.
    When downward move reach EOF, it automatically add empty line to be able
    to across the original EOF.

    |characterwise-visual| (|v_v|)
    |blockwise-visual| (|v_CTRL-V|)
    Move visual selected word or block to up/down/left/right.
    When right direction reach EOL it automatically add one space " " to be
    able to across original EOL.

* Force 1column movement in right/left move~
v_<Plug>(textmanip-move1-left)
v_<Plug>(textmanip-move1-right)

* Toggle Mode between 'insert' and 'replace'~
n_<Plug>(textmanip-toggle-mode)
x_<Plug>(textmanip-toggle-mode)

------------------------------------------------------------------------------
MODE SPECIFIED VERSION~
For 'duplicate' and 'move' action, mode-fixed keymap is also provided.
If you want to 'duplicate' or 'move' always act as 'insert' or 'replace' mode
independently of |g:textmanip_current_mode|, use following keymap.
Also see |textmanip-example| for practical usecase.

Insert~
Have '-i' suffix

n_<Plug>(textmanip-duplicate-up-i)
n_<Plug>(textmanip-duplicate-down-i)

v_<Plug>(textmanip-duplicate-up-i)
v_<Plug>(textmanip-duplicate-down-i)
v_<Plug>(textmanip-duplicate-left-i)
v_<Plug>(textmanip-duplicate-right-i)

v_<Plug>(textmanip-move-up-i)
v_<Plug>(textmanip-move-down-i)
v_<Plug>(textmanip-move-left-i)
v_<Plug>(textmanip-move-right-i)

v_<Plug>(textmanip-move1-left-i)
v_<Plug>(textmanip-move1-right-i)

Replace~
Have '-r' suffix

n_<Plug>(textmanip-duplicate-up-r)
n_<Plug>(textmanip-duplicate-down-r)

v_<Plug>(textmanip-duplicate-up-r)
v_<Plug>(textmanip-duplicate-down-r)
v_<Plug>(textmanip-duplicate-left-r)
v_<Plug>(textmanip-duplicate-right-r)

v_<Plug>(textmanip-move-up-r)
v_<Plug>(textmanip-move-down-r)
v_<Plug>(textmanip-move-left-r)
v_<Plug>(textmanip-move-right-r)

v_<Plug>(textmanip-move1-left-r)
v_<Plug>(textmanip-move1-right-r)
==============================================================================
FUNCTION						 *textmanip-functions*

textmanip#mode()
	Simply return value of |g:textmanip_current_mode|.
	It could be use to indicate current mode in |'statusline'|.
									      
==============================================================================
COMMAND							    *textmanip-command*

*:TextmanipToggleMode*
	Switch mode between 'insert' and 'replace'.

*:TextmanipToggleIgnoreShiftWidth*
	Toggle whether line move right/left ignore |'shiwftwidth'| or not.

==============================================================================
CONFIGURATION EXAMPLE					   *textmanip-example*

* Macvim~
<D-> is mac COMMAND key.
>
	xmap <D-d> <Plug>(textmanip-duplicate-down)
	nmap <D-d> <Plug>(textmanip-duplicate-down)
	xmap <D-D> <Plug>(textmanip-duplicate-up)
	nmap <D-D> <Plug>(textmanip-duplicate-up)

	xmap <C-j> <Plug>(textmanip-move-down)
	xmap <C-k> <Plug>(textmanip-move-up)
	xmap <C-h> <Plug>(textmanip-move-left)
	xmap <C-l> <Plug>(textmanip-move-right)

	" toggle insert/replace with <F10>
	nmap <F10> <Plug>(textmanip-toggle-mode)
	xmap <F10> <Plug>(textmanip-toggle-mode)
<

Advanced
>
	" use Enter and Shift-Enter to insert blank line.
	" which is useful since I enforce duplicate with '-r(replace' mode.
	nmap <CR>   <Plug>(textmanip-blank-below)
	nmap <S-CR> <Plug>(textmanip-blank-above)
	xmap <CR>   <Plug>(textmanip-blank-below)
	xmap <S-CR> <Plug>(textmanip-blank-above)

	" simple duplicate
	nmap <D-D> <Plug>(textmanip-duplicate-up)
	nmap <D-d> <Plug>(textmanip-duplicate-down)
	xmap <D-D> <Plug>(textmanip-duplicate-up)
	xmap <D-d> <Plug>(textmanip-duplicate-down)
				 
	" move with jkhl
	xmap <C-k> <Plug>(textmanip-move-up)
	xmap <C-j> <Plug>(textmanip-move-down)
	xmap <C-h> <Plug>(textmanip-move-left)
	xmap <C-l> <Plug>(textmanip-move-right)

	" duplicate with COMMAND-SHIFT-jkhl always replace-mode
	xmap <D-K> <Plug>(textmanip-duplicate-up-r)
	xmap <D-J> <Plug>(textmanip-duplicate-down-r)
	xmap <D-H> <Plug>(textmanip-duplicate-left-r)
	xmap <D-L> <Plug>(textmanip-duplicate-right-r)

	" use allow key to force replace movement
	xmap  <Up>    <Plug>(textmanip-move-up-r)
	xmap  <Down>  <Plug>(textmanip-move-down-r)
	xmap  <Left>  <Plug>(textmanip-move-left-r)
	xmap  <Right> <Plug>(textmanip-move-right-r)

	" toggle insert/replace with <F10>
	nmap <F10> <Plug>(textmanip-toggle-mode)
	xmap <F10> <Plug>(textmanip-toggle-mode)
<

* gVim~
>
	xmap <M-d> <Plug>(textmanip-duplicate-down)
	nmap <M-d> <Plug>(textmanip-duplicate-down)
	xmap <M-D> <Plug>(textmanip-duplicate-up)
	nmap <M-D> <Plug>(textmanip-duplicate-up)

	xmap <C-j> <Plug>(textmanip-move-down)
	xmap <C-k> <Plug>(textmanip-move-up)
	xmap <C-h> <Plug>(textmanip-move-left)
	xmap <C-l> <Plug>(textmanip-move-right)

	" toggle insert/replace with <F10>
	nmap <F10> <Plug>(textmanip-toggle-mode)
	xmap <F10> <Plug>(textmanip-toggle-mode)
<
* vim on terminal~
>
	xmap <Space>d <Plug>(textmanip-duplicate-down)
	nmap <Space>d <Plug>(textmanip-duplicate-down)
	xmap <Space>D <Plug>(textmanip-duplicate-up)
	nmap <Space>D <Plug>(textmanip-duplicate-up)

	xmap <C-j> <Plug>(textmanip-move-down)
	xmap <C-k> <Plug>(textmanip-move-up)
	xmap <C-h> <Plug>(textmanip-move-left)
	xmap <C-l> <Plug>(textmanip-move-right)

	" toggle insert/replace with <F10>
	nmap <F10> <Plug>(textmanip-toggle-mode)
	xmap <F10> <Plug>(textmanip-toggle-mode)
<
==============================================================================
USE CASE						   *textmanip-usecase*

* Indent text block
  While editing markdown or vim help file.
  Indenting selected text more easily.

* Duplicate selected text below.
  When you want to call same function multiple time with various
  arguments or create facially resemble code structure by yank and
  paste.
  It is bothersome to "visually select text block" then "yank" then
  "move cursor" then "paste".
  This mini-plugin enables you to simply select text and then "<M-d>" to
  duplicate selected text block to bottom direction.
  Of course, "<M-d>" is my choice, you can assign your favorite key map.

==============================================================================
PRACTICE						  *textmanip-practice*

[FIXME] EXPLAIN OR MOVIE

------------------------------------------------------------------------------
Case1~

from
>
	if     (s.line() <= e.line()) && (s.col() <=  e.col()) | let case = 1
	elseif (s.line() >= e.line()) && (s.col() >=  e.col()) | let case = 2
	elseif (s.line() <= e.line()) && (s.col() >=  e.col()) | let case = 3
	elseif (s.line() >= e.line()) && (s.col() <=  e.col()) | let case = 4
	endif
<

to
>
	let case = 
	      \ (s.line() <= e.line()) && (s.col() <=  e.col()) ? 1 :
	      \ (s.line() >= e.line()) && (s.col() >=  e.col()) ? 2 :
	      \ (s.line() <= e.line()) && (s.col() >=  e.col()) ? 3 :
	      \ (s.line() >= e.line()) && (s.col() <=  e.col()) ? 4 :
	      \ throw
<

------------------------------------------------------------------------------
Case2~

from
>
	if     case ==# 1 | let [u, d, l, r ] = [ s, e, s, e ] 
	elseif case ==# 2 | let [u, d, l, r ] = [ e, s, e, s ] 
	elseif case ==# 3 | let [u, d, l, r ] = [ s, e, e, s ] 
	elseif case ==# 4 | let [u, d, l, r ] = [ e, s, s, e ] 
	endif

to
>
	let [u, d, l, r ] =
	      \ case ==# 1 ?  [ s, e, s, e ] :
	      \ case ==# 2 ?  [ e, s, e, s ] :
	      \ case ==# 3 ?  [ s, e, e, s ] :
	      \ case ==# 4 ?  [ e, s, s, e ] :
	      \ throw
<
==============================================================================
DETAIL							     *textmanip-detail*

Linewise or Blockwise is vary from how you invoked

     * vim-mode - wise map >
     +--------------+--------------+
     | vim-mode     | wise	   |
     +--------------+--------------|
     | n	    | linewise	   |
     | v oneline    | blockwise    |
     | v multiline  | linewise	   |
     | C-v	    | blockwise    |
     +--------------+--------------+
<
Textmanip support 2 mode: insert, replace

   * INSERT - action table >
   +-----------------+--------------+--------------+
   |  action	     | linewise     | blockwise    |
   +-----------------+--------------|--------------|
   | move-up/down    |	    o	    |	   o	   |
   | move-right/left |	    o	    |	   o	   |
   | dup-up/down     |	    o	    |	   o	   |
   | dup-righ/left   |	   ????     |	TODO	   |
   +-----------------+--------------+--------------+
<
   * REPLACE - action table >
   +-----------------+--------------+--------------+
   |  action	     | linewise     | blockwise    |
   +-----------------+--------------|--------------|
   | move-up/down    |	    o	    |	   o	   |
   | move-right/left |	    o	    |	   o	   |
   | dup-up/down     |	    o	    |	   o	   |
   | dup-righ/left   |	   N/A	    |	TODO	   |
   +-----------------+--------------+--------------+
<
==============================================================================
TODO							      *textmanip-todo*

DONE
- support replace mode [up/down => o] [right/left => o ]
- duplicate right/left
- duplicate up/down replacemode
- refactoring( file separate, further oop style), 90% done
- deleted stabilize, kickout action or delete this action?

STACK
- Corner case handling in replace mode( I know its include bug )
- ?? option to automatically delete trailing space?
- ?? option to automatically indent( I'm not in mood )
- ?? move block or line to ^,$ with one command. I'm not in mood.

==============================================================================
BUG								*textmanip-bug*

When you movement visually selected text to right or left, then |:undo|, cursor
position not restored to original position.

|<Tab>| is treated as 1 char ,so using textmanip in Tab including text destroy
layout.

==============================================================================
CHANGELOG						 *textmanip-changelog*
2015-04-19: v2.5
	- [new]
	  Experimental hook support.

2015-04-20:
	- [refactoring]
	  rewrite almost all code for readabilty.

2015-04-19:
	- [breaking]
	  remove kickout related command, vertual keymap.
	   - <Plug>(textmanip-kickout)
	   - :TextmanipKickout

2015-04-12:
	- [caution]
	  rename <Plug>(textmanip-move-*-1col) to <Plug>(textmanip-move1-*)

2013-11-04: v2.0
	- [new] now duplicate right/left support.
	- refactoring
	- [bugfix] adjust count
2013-11-04: v1.9
	- refactoring
	- [bugfix] count now properly work in replace mode.
2013-11-02: v1.8
	- greatly improve stability. greatly refactored.
	- count and replace move is now stable.
2013-10-30: v1.3
	- [bugfix] error when global var not defined.
2013-10-27: v1.2
	- [bugfix] count not properly handled.
2013-10-26:
	- fix bug when cusuros at BOL and move to left with linewise.
2013-10-24:
	- support blockwise duplication.
2013-10-24: v1.0
	- completely rewriten code, and now suppport blockwise movement
	  all direction and undoable!!
	  keep cursor pos for all movement.
2013-10-02:
	- just [experiment] new action textmanip-kickout.
2011-12-18:
	- [bugfix] move right or left did '>' twice. should do once.
2011-08-16: v0.7
	- [bugfix] extend_eol not worked in some situation.
2011-08-15: v0.6
	- [bugfix] better handling for redraw problem
2011-08-14: v0.5
	- [bugfix] handle left and up movement limit.
	- [bugfix] more strict check to determine continuous execution.
	- [bugfix] remove unnecessarily `undojoin` twice, and remove
	  catch clause(E790)
2011-08-14: v0.4
	- support count for duplicate and move
	- bug fix for `undojoin`
	- refactoring,, support duplicate text to upper direction.
	- change keymap for consistency, sorry.
	- autoloadize!
2011-06-13: v0.3
	- Fix typo
2011-06-13: v0.2
	- Fix typo
2011-03-10: v0.1
	- First release
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
