qutebrowser-docker () {
    docker run -d -it --rm \
        --device /dev/snd \
        --device /dev/dri \
        --network lamp \
        -e DISPLAY=$DISPLAY \
        -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
        -e PULSE_SERVER=unix:/run/user/$UID/pulse/native \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /run/user/$UID:/run/user/$UID \
        -v $HOME/Downloads:/Downloads \
        qutebrowser
}

libreoffice-docker () {
    docker run -d -it --rm \
        --network none \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Docs:/home/app/Docs \
        libreoffice --nologo "$@"
}

youtube-dl-docker () {
    local -r download_dir="$HOME/YTD"
    if [[ ! -d "$download_dir" ]]; then
        mkdir -p "$download_dir"
    fi

    docker run -it --rm \
        -v $HOME/YTD:/home/app/YTD \
        youtube-dl "$@"
}

lamp-docker () {
    local -r mysql_data_dir="$HOME/.dockerdata/mysql"
    if [[ ! -d "$mysql_data_dir" ]]; then
        mkdir -p "$mysql_data_dir"
    fi

    docker run -d -it --rm \
        --network lamp \
        --ip 10.10.10.10 \
        -p 3306:3306 \
        -p 80:80 \
        -v /etc/hosts:/etc/hosts \
        -v $HOME/projects:/home/app/projects \
        --name lamp \
        lamp
}

doublecmd-qt-docker () {
    local -r doublecmd_data_dir="$HOME/.dockerdata/doublecmd"
    if [[ ! -d "$doublecmd_data_dir" ]]; then
        mkdir -p "$doublecmd_data_dir"
    fi

    docker run -d -it --rm \
        --network none \
        --device /dev/dri \
        -e DISPLAY=$DISPLAY \
        -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /run/user/$UID:/run/user/$UID \
        -v $HOME:/home/foobar \
        -v $HOME/Downloads:/Downloads \
        -v $HOME/Docs:/Docs \
        -v $HOME/VLC:/VLC \
        -v $HOME/YTD:/YTD \
        -v $HOME/projects:/projects \
        -v $HOME/.fonts:/home/app/.fonts \
        -v $HOME/.fonts.conf:/home/app/.fonts.conf \
        -v /storage/workstation:/workstation \
        -v /storage/archive:/archive \
        -v $doublecmd_data_dir:/home/app/.config/doublecmd \
        --name doublecmd-qt \
        doublecmd-qt
}

djview4-docker () {
    docker run -d -it --rm \
        --network none \
        --device /dev/dri \
        -e DISPLAY=$DISPLAY \
        -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /run/user/$UID:/run/user/$UID \
        -v $HOME/Downloads:/home/app/Downloads \
        --name djview4 \
        djview4
}

keepassxc-docker () {
    docker run -d -it --rm \
        --network none \
        --device /dev/dri \
        -e DISPLAY=$DISPLAY \
        -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /run/user/$UID:/run/user/$UID \
        -v $HOME/Downloads:/home/app/Downloads \
        -v $HOME/keepassxc:/home/app/keepassxc \
        --name keepassxc \
        keepassxc /home/app/keepassxc/pdbx.kdbx
}

freerdp-docker () {
    docker run -it --rm \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Downloads:/home/app/Downloads \
        --name freerdp \
        freerdp "$@"
}

rdesktop-docker () {
    docker run -it --rm \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Downloads:/home/app/Downloads \
        --name rdesktop \
        rdesktop "$@"
}

krita-docker () {
    docker run -d -it --rm \
        --device /dev/dri \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Downloads:/home/app/Downloads \
        --name krita \
        krita
}

pinta-docker () {
    docker run -d -it --rm \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Downloads:/home/app/Downloads \
        --name pinta \
        pinta
}

mypaint-docker () {
    docker run -d -it --rm \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Downloads:/home/app/Downloads \
        --name mypaint \
        mypaint
}

inkscape-docker () {
    docker run -d -it --rm \
        --device /dev/dri \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Downloads:/home/app/Downloads \
        --name inkscape \
        inkscape
}

ffmpeg-docker () {
    docker run -it --rm \
        --device /dev/dri \
        -v $HOME/Downloads:/home/app/Downloads \
        -v $HOME/VLC:/home/app/VLC \
        ffmpeg "$@"
}

vlc-docker () {
    local -r vlc_dir="$HOME/VLC"
    if [[ ! -d "$vlc_dir" ]]; then
        mkdir -p "$vlc_dir"
    fi

    local files="$@"

    docker run -d -it --rm \
        --device /dev/snd \
        --device /dev/dri \
        -e DISPLAY=$DISPLAY \
        -e PULSE_SERVER=unix:/run/user/$UID/pulse/native \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /run/user/$UID/pulse:/run/user/$UID/pulse \
        -v $HOME/VLC:/home/app/VLC \
        --name vlc \
        vlc --no-qt-privacy-ask "$files"
  }

copyq-docker () {
    local copyq_data_dir="$HOME/.dockerdata/copyq";

    if [[ ! -d $copyq_data_dir ]]; then
        mkdir -p $copyq_data_dir
    fi 

    docker run -d -it --rm \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $copyq_data_dir:/home/app/.config/copyq \
        --name copyq \
        copyq
}

gimp-docker () {
    docker run -d -it --rm \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/Downloads:/home/app/Downloads \
        --name gimp \
        gimp
}

flameshot-docker () {
    docker run -d -it --rm \
        --device /dev/dri \
        -e DISPLAY=$DISPLAY \
        -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /run/user/$UID:/run/user/$UID \
        -v $HOME/Downloads:/home/app/Downloads \
        --name flameshot \
        flameshot
}

chrome-docker () {
    if (( $# < 2 )); then
        echo "Usage: chrome-docker [--user-data-dir=/user/data/dir] [--container-name=name] [arg1 ...] [url1 ...]"
        return 1
    fi

    local user_data_dir=""
    local container_name=""

    for argval in "$@"; do
        case $argval in
            --user-data-dir=*)
                local user_data_dir="$(sed -re 's/[^=]+=//' <<< "$argval")" && shift
                ;;
            --container-name=*)
                local container_name="$(sed -re 's/[^=]+=//' <<< "$argval")" && shift
                ;;
        esac
    done

    if [[ -z "$container_name" ]]; then
        local rand_id="$(randHex 8)"
        local container_name="chrome-$rand_num-$rand_id"
    fi

    local args_urls="$@"

    if [[ ! -d "$user_data_dir" ]]; then
        mkdir -p "$user_data_dir"
    fi

    local docker_container_name_arg="--name $container_name"
    local docker_user_data_dir_arg=""
    if [[ ! -z "$user_data_dir" ]]; then
        local docker_user_data_dir_arg="-v $user_data_dir:/home/app/.chrome"
    fi

    docker run -d -it --rm \
        --security-opt seccomp=~/projects/dotfiles/chrome.seccomp.json \
        --device /dev/snd \
        --device /dev/dri \
        --network lamp \
        -e DISPLAY=$DISPLAY \
        -e PULSE_SERVER=unix:/run/user/$UID/pulse/native \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /dev/shm:/dev/shm \
        -v /etc/hosts:/etc/hosts \
        -v /run/user/$UID/pulse:/run/user/$UID/pulse \
        -v $HOME/Downloads:/home/app/Downloads \
        $docker_user_data_dir_arg \
        $docker_container_name_arg \
        chrome \
        --user-data-dir=/home/app/.chrome \
        --disable-fre \
        --no-default-browser-check \
        --no-first-run \
        $args_urls
}

chrome-twitter-search () {
    local search_term="$(sed -r -e 's/\s+/+/g' <<< "$@")"
    chrome-browsing "https://twitter.com/search?q=$search_term"
}

chrome-google-search () {
    local search_term="$(sed -r -e 's/\s+/+/g' <<< "$@")"
    chrome-browsing "https://google.com/search?q=$search_term"
}

chrome-twitter-pkrumins () {
    local chrome_data_dir="$HOME/.dockerdata/chrome/twitter-pkrumins"
    chrome-docker \
        --user-data-dir="$chrome_data_dir" \
        "https://twitter.com"
}

chrome-twitter-browserling () {
    local chrome_data_dir="$HOME/.dockerdata/chrome/twitter-browserling"
    chrome-docker \
        --user-data-dir="$chrome_data_dir" \
        "https://twitter.com"
}

chrome-fb () {
    local chrome_data_dir="$HOME/.dockerdata/chrome/fb"
    chrome-docker \
        --user-data-dir="$chrome_data_dir" \
        --container-name="chrome-fb"
        --class="fb" \
        "https://fb.com/messages"
}

chrome-gmail () {
    local chrome_data_dir="$HOME/.dockerdata/chrome/gmail"

    chrome-docker \
        --user-data-dir="$chrome_data_dir" \
        --container-name="chrome-gmail" \
        --class=gmail \
        "https://mail.google.com/mail/u/0/#inbox" \
        "https://mail.google.com/mail/u/1/#inbox" \
        "https://mail.google.com/mail/u/2/#inbox" \
        "https://mail.google.com/mail/u/3/#inbox"
}

chrome-statcounter () {
    local chrome_data_dir="$HOME/.dockerdata/chrome/statcounter"

    chrome-docker \
        --user-data-dir="$chrome_data_dir" \
        "https://statcounter.com"
}

chrome-browsing () {
    local template_dir="$HOME/.dockerdata/chrome/_template"
    if [[ ! -d "$template_dir" ]]; then
        echo "Error: Chrome template hasn't been setup, run chrome-setup-template to set it up."
        return 1
    fi

    local rand_id="$(randHex 8)"
    local chrome_data_dir="/tmp/chrome-browsing-$rand_id"
    local container_name="chrome-browsing-$rand_id"

    cp -r "$template_dir" "$chrome_data_dir" || {
        echo "Error: Couldn't copy $template_dir to $chrome_data_dir, error code $?."
        return 1
    }

    local urls=("$@")

    if [[ ${#urls[@]} == 0 ]]; then
        urls=("https://google.com")
    fi

    chrome-docker \
        --user-data-dir="$chrome_data_dir" \
        --container-name="$container_name" \
        -incognito \
        "${urls[@]}"
}

chrome-setup-template () {
    local -r chrome_data_dir="$HOME/.dockerdata/chrome/_template"
    if [[ "$1" == "fresh" ]]; then
        rm -rf "$chrome_data_dir";
    fi
    if [[ ! -d "$chrome_data_dir" ]]; then
        mkdir -p "$chrome_data_dir"
    fi

    chrome-docker \
        --user-data-dir="$chrome_data_dir" \
        --container-name=chrome-setup-template \
        "https://google.com"
}

r-docker () {
    local container_name="r_"

    docker run -it --rm \
    -v $HOME/Downloads:/home/app/Downloads \
    r -q --vanilla
}

alias qutebrowser='qutebrowser-docker'
alias excel='libreoffice-docker --calc'
alias word='libreoffice-docker --writer'
alias libreoffice='libreoffice-docker'
alias mysql='docker exec -it lamp mysql'
alias doublecmd='doublecmd-qt'
alias doublecmd-qt='doublecmd-qt-docker'
alias djview4='djview4-docker'
alias freerdp='freerdp-docker'
alias rdesktop='rdesktop-docker'
alias krita='krita-docker'
alias pinta='pinta-docker'
alias mypaint='mypaint-docker'
alias inkscape='inkscape-docker'
alias ffmpeg='ffmpeg-docker'
alias keepass='keepassxc-docker'
alias vlc='vlc-docker'
alias copyq-menu='docker exec -d copyq copyq menu'
alias copyq-daemon='copyq-docker'
alias copyq-menu='docker exec -d copyq copyq menu'
alias gimp='gimp-docker'
alias flameshot='flameshot-docker' # todo: setup dbus

alias chrome='chrome-browsing'
alias gmail='chrome-gmail'
alias fb='chrome-fb'
alias hn='chrome-browsing https://news.ycombinator.com'
alias statc='chrome-statcounter'
alias reddit='chrome-browsing https://old.reddit.com'
alias lobsters='chrome-browsing https://lobste.rs'
alias ts='chrome-twitter-search'
alias g='chrome-google-search'

alias techurls='chrome-browsing https://techurls.com'
alias devurls='chrome-browsing https://devurls.com'
alias sciurls='chrome-browsing https://sciurls.com'
alias finurls='chrome-browsing https://finurls.com'
alias mathurls='chrome-browsing https://mathurls.com'

alias r='r-docker'

